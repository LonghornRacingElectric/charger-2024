#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_SFPRODISPLAYULTRALIGHTITALIC_OTF_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x0064,  1 },  // (First char = [0x0064, d], Second char = [0x0029, parenright], Kerning dist = 1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x006C,  1 },  // (First char = [0x006C, l], Second char = [0x0029, parenright], Kerning dist = 1)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0031, -1 },  // (First char = [0x0031, one], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x002D, hyphen], Kerning dist = -3)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0031, -1 },  // (First char = [0x0031, one], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002E, period], Kerning dist = -1)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0030, zero], Kerning dist = -3)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0030, zero], Kerning dist = -3)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0031, one], Kerning dist = -3)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x0031, one], Kerning dist = -1)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0031, one], Kerning dist = -3)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0031, one], Kerning dist = -1)
    { 0x003A, -1 },  // (First char = [0x003A, colon], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0031, one], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0031, one], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0031, one], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0032, two], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0031, -1 },  // (First char = [0x0031, one], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0032, two], Kerning dist = -1)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0032, two], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0033, three], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0033, three], Kerning dist = -2)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0034, four], Kerning dist = -3)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0034, four], Kerning dist = -3)
    { 0x0031, -1 },  // (First char = [0x0031, one], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x0034, four], Kerning dist = -3)
    { 0x003F, -1 },  // (First char = [0x003F, question], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0034, four], Kerning dist = -3)
    { 0x005A, -2 },  // (First char = [0x005A, Z], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x0034, four], Kerning dist = -2)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0035, five], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0035, five], Kerning dist = -2)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0035, five], Kerning dist = -1)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0036, six], Kerning dist = -3)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0036, six], Kerning dist = -3)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0036, six], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0036, six], Kerning dist = -1)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0036, six], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0065, -2 },  // (First char = [0x0065, e], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0069,  1 },  // (First char = [0x0069, i], Second char = [0x003F, question], Kerning dist = 1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -3)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0043, C], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0043, C], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0043, C], Kerning dist = -2)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0043, C], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0054, T], Kerning dist = -2)
    { 0x002D, -3 },  // (First char = [0x002D, hyphen], Second char = [0x0054, T], Kerning dist = -3)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0043, -2 },  // (First char = [0x0043, C], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0061, -3 },  // (First char = [0x0061, a], Second char = [0x0054, T], Kerning dist = -3)
    { 0x0065, -3 },  // (First char = [0x0065, e], Second char = [0x0054, T], Kerning dist = -3)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0068, -3 },  // (First char = [0x0068, h], Second char = [0x0054, T], Kerning dist = -3)
    { 0x006D, -3 },  // (First char = [0x006D, m], Second char = [0x0054, T], Kerning dist = -3)
    { 0x006E, -3 },  // (First char = [0x006E, n], Second char = [0x0054, T], Kerning dist = -3)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0073, -2 },  // (First char = [0x0073, s], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0031, -1 },  // (First char = [0x0031, one], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -3)
    { 0x0064, -1 },  // (First char = [0x0064, d], Second char = [0x0061, a], Kerning dist = -1)
    { 0x006C, -1 },  // (First char = [0x006C, l], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0064, d], Kerning dist = -3)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -3)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0067, g], Kerning dist = -3)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -2)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0073, s], Kerning dist = -1)
};
